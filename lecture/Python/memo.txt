0. 기본 연산
+, -, *, /, //, %

a += 1 : a 1 증가
a -= 1
a *= 1
등등등 위 6개 연산에 대해 모두 가능

1. 자료형

1) int
 - 정수
 - 사칙연산, //(몫), %(나머지) 연산

2) float
 - 실수
 - 유효숫자와 자릿수(10의 몇승)로 저장
 - 사칙연산, //(몫), %(나머지) 연산

3) str
 - 입력 방식: " ", ' ', """ """, ''' '''
 - a[i] 와 같이 index로 선택 가능
 - a[5:10] 슬라이싱 가능
 - +와 * 연산 가능
 - str.replace('Python', 'C') : Python을 C로 교체
 - str.split(',') ','를 기준으로 스트링 나누기
 - str.strip() 스트링 양 끝의 공백 제거
 - len(a) a의 길이

4) list
 - [1, 2, 3] 과 같이 선언
 - 순서가 있는 시퀀스
 - 원소 중복 가능
 - 인덱싱, 슬라이싱 가능
 - +, * 연산 가능
 - a[i] = 바꾸고 싶은 값 으로 변경
 - str.append(원소) 추가 가능
 - del a[i] i+1번째 원소 삭제
 - a.sort() 로 정렬 가능

5) tuple
 - (1, 2, 3) 과 같이 선언
 - 원소 하나짜리 튜플 선언할때는 쉼표 포함해야만함 ex. (1, )
 - 순서가 있는 시퀀스
 - 원소 중복 가능
 - 인덱싱, 슬라이싱 가능
 - +, * 연산 가능
 - 수정 불가
 - 지금은 수정이 되지 않는 리스트로 이해해도 무방
 - list보다 빠르다

6) dict
 - 키를 갖는 자료형
 - a['키'] 와 같이 값을 호출
 - a['키'] = 바꾸고 싶은 값 으로 변경
 - 키는 스트링으로 하는걸 추천(리스트와 혼동 방지)
 - 딕셔너리끼리 더할때는 a.update(dict형자료)
   ex. a.update({'a': 123123, 'b': 12312})

7) bool (Boolean)
 - True, False

2. 조건식, 조건문
 1) 조건식
   - ==, !=, >, <, >=, <=
   - is, not
   - and, or 연산 가능
   - 1 in [1, 2, 3, 4] (1이 [1, 2, 3, 4]의 원소인가?)

 2) 조건문

if 조건식:
    실행할것1
    실행할것2
    실행할것3

    if 조건식2:
       실행할것1
       실행할것2

       실행할것3

elif a == 100:
    실행할것1
    실행할것2
    실행할것3

elif 다른 조건:
    다른명령

else:
    다른명령


3. 반복자, 반복문
  1. 반복자
    - iterator 를 반복자라 번역
    - 지금은 그냥 for 문에 쓰인다는 것 정도만 알면 됨

  2. 반복문
    - 반복하는 것을 보통 Loop를 돌린다고도 표현함.
    - for i in 반복자:
    - while 조건식:
      - while True: <- 무한루프
      - break 명령을 통해 while Loop 탈출 가능



파이썬 random 패키지
import random
으로 사용

random.randint(1, 5)
 - 1~5 사이의 임의의 정수 return

random.choice(['가위', '바위', '보'])
 - 리스트 원소 중 임의로 하나 return


4. 함수
def 함수이름(arg1, arg2, arg3, arg4=None):
  로직
  로직
  return 리턴값

** 함수는 arg가 없을 수도, return이 없을 수도 있다.

함수이름(1,2,3)
함수이름(1,2,3,4)
함수이름(1,2,3, arg4=뭐뭐)

5. 클래스

property
method


class 클래스이름:
  var1 = 1
  var2 = 100
  var3 = '하이'

  def method1(self):
      ret = self.var1 + self.var2
      return ret

  def method2(self, string):
      print(string)


class = 일종의 데이터 타입(자료형)
instance = data


class Animal(object):
    name = None
    bark_sound = '몰라'
    color = None

    def bark(self):
        print(self.bark_sound)

    def chang_color(self, color):
        self.color = color

    def print_color(self, color):
        print(self.color)


class Dog(Animal):
    bark_sound = '멍멍'


class Cat(Animal):
    bark_sound = '냐옹'


class WhiteDog(Dog):
    color = '하양'


class HW(object):
    def __init__(self, title, due):
        self.title = title
        self.due = due











